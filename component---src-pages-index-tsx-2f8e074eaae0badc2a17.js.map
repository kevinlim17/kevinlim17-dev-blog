{"version":3,"file":"component---src-pages-index-tsx-2f8e074eaae0badc2a17.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/main/Introduction.tsx","webpack://gatsby-starter-default/./src/components/main/CategoryList.tsx","webpack://gatsby-starter-default/./src/components/main/PostItem.tsx","webpack://gatsby-starter-default/./src/hooks/useInfiniteScroll.tsx","webpack://gatsby-starter-default/./src/components/main/PostList.tsx","webpack://gatsby-starter-default/./src/pages/index.tsx","webpack://gatsby-starter-default/./src/components/common/ProfileImage.tsx","webpack://gatsby-starter-default/./node_modules/decode-uri-component/index.js","webpack://gatsby-starter-default/./node_modules/split-on-first/index.js","webpack://gatsby-starter-default/./node_modules/filter-obj/index.js","webpack://gatsby-starter-default/./node_modules/query-string/base.js","webpack://gatsby-starter-default/./node_modules/query-string/index.js"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\nimport ProfileImage from '../common/ProfileImage'\nimport { keyframes } from '@emotion/react'\nimport TypeWriter from 'typewriter-effect'\nimport { GradientAnimation } from 'components/lib/GradientAnimation'\n\ntype IntroductionProps = {\n  profileImage: IGatsbyImageData\n}\n\nconst Background = styled.div`\n  width: 100%;\n  color: #1f2937;\n  background: linear-gradient(\n    180deg,\n    rgba(2, 0, 36, 0.3) 0%,\n    rgba(196, 196, 196, 1) 30%,\n    rgba(250, 249, 246, 1) 100%\n  );\n  animation: ${GradientAnimation} 15s ease-out infinite;\n  background-size: 400%;\n`\n\nconst PhoneShapedAnimation = keyframes`\n  0% { margin-bottom: -10vh; opacity: 0; }\n  50% { margin-bottom: -7vh; opacity: 0;}\n  100% { margin-bottom: 0px; opacity: 1; }\n`\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: end;\n  width: 80vw;\n  margin: 0 auto;\n  padding-top: 100px;\n  // padding: 80px 0;\n\n  @media (max-width: 768px) {\n    width: 90vw;\n    // padding: 60px 20px;\n  }\n`\n\nconst ContentCard = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  background: rgba(250, 249, 246, 1);\n  border: 3px dashed rgba(2, 0, 36, 1);\n  border-right: 1px dashed rgba(2, 0, 36, 1);\n  border-bottom: 0;\n  border-radius: 0;\n  // box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n  position: relative;\n  margin-top: 3rem;\n  transition: all 0.5s ease;\n\n  animation-name: ${PhoneShapedAnimation};\n  animation-duration: 2.5s;\n\n  &:hover {\n    transform: translateY(-2px);\n    transition: all 0.5s ease;\n    box-shadow: 2px 2px 0 0 rgba(196, 196, 196, 0.7);\n    color: rgba(196, 196, 196, 1);\n  }\n`\n\nconst CardHeader = styled.div`\n  background: white;\n  padding: 30px;\n  border-bottom: 2px solid rgba(196, 196, 196, 1);\n  position: relative;\n  width: 100%;\n`\n\nconst MainTitle = styled.h1`\n  font-size: 32px;\n  font-weight: 400;\n  line-height: 1.3;\n  color: rgba(2, 0, 36, 1);\n  margin: 0;\n  word-break: keep-all;\n\n  @media (max-width: 768px) {\n    font-size: 24px;\n  }\n`\n\nconst ContentSection = styled.div`\n  padding: 20px 30px;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n\n  @media (max-width: 768px) {\n    padding: 30px 20px;\n  }\n`\n\nconst TypeWriterSection = styled.div`\n  background: rgba(196, 196, 196, 0.1);\n  padding: 12px;\n  // border: 1px solid #e5e7eb;\n  border-radius: 12px;\n  margin: 10px 0;\n`\n\nconst SubTitle = styled.div`\n  font-size: 18px;\n  font-family: 'NanumSquareNeoLight';\n  line-height: 1.5;\n  color: rgba(2, 0, 36, 1);\n  min-height: 60px;\n\n  @media (max-width: 768px) {\n    font-size: 16px;\n  }\n`\n\nconst MetaInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n  border-top: 1.5px solid rgba(2, 0, 36, 0.5);\n`\n\nconst AuthorSection = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  margin-top: 1rem;\n  gap: 20px;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    gap: 16px;\n    text-align: center;\n  }\n`\n\nconst TagSection = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n`\n\nconst skillColors = [\n  '#00bcd4', // 청록색\n  '#607d8b', // 블루그레이\n  '#00796b', // 진한 청록색\n  '#e91e63', // 핑크\n  '#ff9800', // 오렌지\n  '#4caf50', // 녹색\n]\n\nconst TagItem = styled.div<{ colorIndex: number }>`\n  padding: 8px 16px;\n  font-size: 16px;\n  background-color: rgba(2, 0, 36, 0.2);\n  color: rgba(2, 0, 36, 0.9);\n  border-radius: 5px;\n  transition: all 0.2s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n    transition: all 0.2s ease;\n    color: rgba(250, 249, 246, 1);\n    box-shadow: 3px 6px 0 0 rgba(196, 196, 196, 0.7);\n    background: ${({ colorIndex }) =>\n      skillColors[colorIndex % skillColors.length]};\n  }\n\n  a {\n    font-weight: 900;\n    font-family: 'NanumSquareNeo';\n    transition: all 0.2s ease;\n\n    &:hover {\n      font-family: 'NanumSquareNeoHeavy';\n      transition: all 0.2s ease;\n    }\n  }\n\n  @media (max-width: 1200px) {\n    font-size: 14px;\n  }\n\n  @media (max-width: 768px) {\n    font-size: 12px;\n  }\n`\n\nconst skills = [\n  'Android',\n  'Kotlin',\n  'Compiler',\n  'Programming Language',\n  'LLVM',\n  'C++',\n  'OCaml',\n  'Scala',\n  'TypeScript',\n  'Accessibility',\n  'AI-Ethics',\n  'STS',\n  'Cybernetics',\n]\n\nconst skillLinks = [\n  'https://developer.android.com',\n  'https://kotlinlang.org',\n  'https://en.wikipedia.org/wiki/Compiler',\n  'https://www.plai.org/',\n  'https://llvm.org',\n  'https://isocpp.org',\n  'https://ocaml.org',\n  'https://scala-lang.org',\n  'https://www.typescriptlang.org',\n  'https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=259656737',\n  'https://ai-ethics.kr',\n  '',\n  'https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=312728401',\n]\n\nconst Introduction: FunctionComponent<IntroductionProps> = function ({\n  profileImage,\n}) {\n  return (\n    <Background>\n      <Wrapper>\n        <ContentCard>\n          <CardHeader>\n            <MainTitle>Kevin Lim,</MainTitle>\n            <MainTitle>\n              Android Native Developer or Compiler Engineer?\n            </MainTitle>\n          </CardHeader>\n          <ContentSection>\n            <TypeWriterSection>\n              <SubTitle>\n                <TypeWriter\n                  options={{\n                    loop: true,\n                  }}\n                  onInit={typewriter => {\n                    typewriter\n                      .pauseFor(2000)\n                      .typeString(\n                        '우리는 남에게 자기 이야기를 들려주려 애쓰며 평생을 보낸다. <br />',\n                      )\n                      .pauseFor(1000)\n                      .typeString('그것은 기억의 본질이다.')\n                      .deleteAll()\n                      .pauseFor(500)\n                      .typeString(\n                        '그렇게 우리는 이 무감하고 우연적인 우주를 견디며 살아간다.  <br />',\n                      )\n                      .pauseFor(1000)\n                      .typeString(\n                        '그러한 습관에 ‘이야기 짓기의 오류’라는 이름이 붙었다고 해서 ',\n                      )\n                      .deleteAll()\n                      .pauseFor(500)\n                      .typeString(\n                        '그것이 진실의 일면에 닿지 않는 것은 아니다. <br />',\n                      )\n                      .pauseFor(1000)\n                      .typeString(\n                        '어떤 이야기는 속에 있는 은유를 좀 더 선명하게 구현할 뿐이다.',\n                      )\n                      .deleteAll()\n                      .pauseFor(500)\n                      .start()\n                  }}\n                />\n              </SubTitle>\n            </TypeWriterSection>\n            <MetaInfo>\n              <AuthorSection>\n                <ProfileImage profileImage={profileImage} />\n                <TagSection>\n                  {skills.map((skill, index) => (\n                    <TagItem key={skill} colorIndex={index}>\n                      <a href={skillLinks[index]}>{skill}</a>\n                    </TagItem>\n                  ))}\n                </TagSection>\n              </AuthorSection>\n            </MetaInfo>\n          </ContentSection>\n        </ContentCard>\n      </Wrapper>\n    </Background>\n  )\n}\n\nexport default Introduction\n","import React, { FunctionComponent, ReactNode } from 'react'\nimport styled from '@emotion/styled'\nimport { Link } from 'gatsby'\n\n/** 데이터 형식 예시\n{\n    \"selectedCategory\": \"Android\",\n    \"categoryList\": {\n      \"All\": 5,\n      \"Android\": 3,\n      \"Kotlin\": 2\n    }\n}\n*/\ntype CategoryItemProps = {\n  active: boolean\n}\n\ntype GatsbyLinkProps = {\n  children: ReactNode\n  className?: string\n  to: string\n} & CategoryItemProps\n\nexport type CategoryListProps = {\n  selectedCategory: string\n  categoryList: {\n    /** 프로퍼티 Key는 string, 프로퍼티 Value는 number임을 나타내는 타입 표기 방법 */\n    [key: string]: number\n  }\n}\n\nconst CategoryListOutsideWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  background-color: rgba(250, 249, 246, 1);\n  width: 100%;\n  padding: 30px 10vw 0;\n  gap: 8px;\n\n  @media (max-width: 768px) {\n    padding: 30px 5vw 0;\n    gap: 6px;\n  }\n`\nconst CategoryListInsideWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  background-color: rgba(250, 249, 246, 1);\n  width: 80vw;\n  padding: 1rem;\n  gap: 8px;\n\n  border-top: 2px solid rgba(2, 0, 36, 1);\n  border-left: 2px solid rgba(2, 0, 36, 1);\n\n  @media (max-width: 768px) {\n    width: 90vw;\n    padding: 30px 5vw;\n    gap: 6px;\n  }\n`\nconst WrapperTitle = styled.div`\n  font-size: 20px;\n  font-weight: 700;\n  margin-right: 100%;\n  margin-bottom: 1rem;\n`\n\n// 다양한 색상 배열 정의\nconst tagColors = [\n  '#e11d48', // 빨간색\n  '#dc2626', // 진한 빨간색\n  '#ea580c', // 주황색\n  '#d97706', // 황금색\n  '#65a30d', // 라임색\n  '#16a34a', // 녹색\n  '#059669', // 에메랄드색\n  '#0891b2', // 청록색\n  '#0284c7', // 하늘색\n  '#2563eb', // 파란색\n  '#4f46e5', // 인디고색\n  '#7c3aed', // 보라색\n  '#c026d3', // 자홍색\n  '#db2777', // 핑크색\n  '#374151', // 회색\n]\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst CategoryItem = styled(({ active, ...props }: GatsbyLinkProps) => (\n  <Link {...props} />\n))`\n  /** Box Properties */\n  background-color: ${({ active, children }) => {\n    if (active) return 'rgba(2, 0, 36, 1)'\n    // children에서 카테고리 이름을 추출하여 색상 결정\n    const categoryName =\n      typeof children === 'string' ? children : children?.toString() || ''\n    const colorIndex = categoryName.length % tagColors.length\n    return tagColors[colorIndex]\n  }};\n  border-radius: 5px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-decoration: none;\n  display: inline-block;\n\n  /** Text Properties */\n  color: rgba(250, 249, 246, 1);\n  font-family: ${({ active }) =>\n    active ? 'NanumSquareNeoHeavy' : 'NanumSquareNeo'};\n  font-size: 14px;\n  padding: 8px 16px;\n  line-height: 1.2;\n  box-shadow: ${({ active }) =>\n    active ? '2px 4px 0 0 rgba(2, 0, 36, 0.5);' : '0'};\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 3px 6px 0 0 rgba(196, 196, 196, 0.7);\n    color: rgba(196, 196, 196, 1);\n    font-family: 'NanumSquareNeoExtraBold';\n    margin-right: 5px;\n  }\n\n  &:active {\n    transform: translateY(0);\n  }\n\n  @media (max-width: 768px) {\n    font-size: 13px;\n    padding: 6px 12px;\n  }\n`\n\nconst CategoryList: FunctionComponent<CategoryListProps> = function ({\n  selectedCategory,\n  categoryList,\n}) {\n  return (\n    <CategoryListOutsideWrapper>\n      <CategoryListInsideWrapper>\n        <WrapperTitle> Categories </WrapperTitle>\n        {Object.entries(categoryList).map(([name, count]) => (\n          <CategoryItem\n            to={`/?category=${name}`}\n            active={name === selectedCategory}\n            key={name}\n          >\n            {name} ({count})\n          </CategoryItem>\n        ))}\n      </CategoryListInsideWrapper>\n    </CategoryListOutsideWrapper>\n  )\n}\n\nexport default CategoryList\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { Link } from 'gatsby'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport { PostFrontmatterType } from 'types/PostItem.types'\n\ntype PostItemProps = PostFrontmatterType & { link: string }\n\nconst PostItemWrapper = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  border-radius: 0;\n  border-top: 2px solid rgba(2, 0, 36, 1);\n  border-left: 2px solid rgba(2, 0, 36, 1);\n  // box-shadow: 0 12px 24px rgba(196, 196, 196, 0.5);\n  background: rgba(250, 249, 246, 1);\n  transition: 0.3s box-shadow;\n  cursor: pointer;\n  overflow: hidden;\n  position: relative;\n\n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 8px 16px 0 0 rgba(2, 0, 36, 0.3);\n    background-color: rgba(2, 0, 36, 1);\n    transition: 0.3s box-shadow;\n    color: white;\n\n    * {\n      color: white !important;\n    }\n  }\n`\n\nconst PostHeader = styled.div`\n  // background: white;\n  padding: 20px 20px 16px 20px;\n  border-bottom: 1px solid rgba(196, 196, 196, 1);\n`\n\nconst Title = styled.h2`\n  background-color: transparent;\n  font-size: 24px;\n  font-weight: 400;\n  line-height: 1.3;\n  color: #000;\n  margin: 0 0 12px 0;\n  word-break: keep-all;\n`\n\nconst PostItemContent = styled.div`\n  padding: 20px;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`\n\nconst Summary = styled.div`\n  font-size: 16px;\n  line-height: 1.6;\n  color: #333;\n  display: -webkit-box;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  word-break: keep-all;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n`\n\nconst MetaInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-top: auto;\n  padding-top: 16px;\n  border-top: 2.5px dashed rgba(196, 196, 196, 1);\n`\n\nconst AuthorDate = styled.div`\n  font-size: 14px;\n  color: #666;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`\n\nconst Date = styled.span``\n\nconst Category = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n`\n\n// 카테고리별 색상 정의\nconst categoryColors = [\n  '#00bcd4',\n  '#607d8b',\n  '#00796b',\n  '#e91e63',\n  '#ff9800',\n  '#4caf50',\n  '#ff5722',\n]\n\nconst CategoryItem = styled.div<{ colorIndex: number }>`\n  padding: 6px 14px;\n  border-radius: 0;\n  background: ${({ colorIndex }) =>\n    categoryColors[colorIndex % categoryColors.length]};\n  font-size: 14px;\n  font-weight: 800;\n  color: white;\n  border-radius: 5px;\n`\n\nconst ThumbnailImage = styled(GatsbyImage)`\n  width: 100%;\n  height: 200px;\n  border-top: 2px solid #000;\n`\n\nconst PostItem: FunctionComponent<PostItemProps> = function ({\n  title,\n  date,\n  categories,\n  summary,\n  thumbnail: {\n    childImageSharp: { gatsbyImageData },\n  },\n  link,\n}) {\n  return (\n    <PostItemWrapper to={link}>\n      <PostHeader>\n        <Title>{title}</Title>\n      </PostHeader>\n      <PostItemContent>\n        <Summary>{summary}</Summary>\n\n        <MetaInfo>\n          <AuthorDate>\n            <Date>{date}</Date>\n          </AuthorDate>\n\n          <Category>\n            {categories.map((category, index) => (\n              <CategoryItem key={category} colorIndex={index}>\n                {category}\n              </CategoryItem>\n            ))}\n          </Category>\n        </MetaInfo>\n      </PostItemContent>\n\n      <ThumbnailImage image={gatsbyImageData} alt=\"Post Item Image\" />\n    </PostItemWrapper>\n  )\n}\n\nexport default PostItem\n","import { MutableRefObject, useState, useEffect, useRef, useMemo } from 'react'\nimport { PostListItemType } from 'types/PostItem.types'\n\nexport type useInfiniteScrollType = {\n  containerRef: MutableRefObject<HTMLDivElement | null>\n  postList: PostListItemType[]\n}\n\nconst NUMBER_OF_ITEMS_PER_PAGE = 10\n\nconst useInfiniteScroll = function (\n  selectedCategory: string,\n  posts: PostListItemType[],\n): useInfiniteScrollType {\n  const containerRef: MutableRefObject<HTMLDivElement | null> =\n    useRef<HTMLDivElement>(null)\n\n  const observer: MutableRefObject<IntersectionObserver | null> =\n    useRef<IntersectionObserver>(null)\n\n  const [count, setCount] = useState<number>(1)\n\n  const postListByCategory = useMemo<PostListItemType[]>(\n    () =>\n      posts.filter(\n        ({\n          node: {\n            frontmatter: { categories },\n          },\n        }: PostListItemType) =>\n          selectedCategory !== 'All'\n            ? categories.includes(selectedCategory)\n            : true,\n      ),\n    [selectedCategory],\n  )\n\n  useEffect(() => setCount(1), [selectedCategory])\n\n  useEffect(() => {\n    observer.current = new IntersectionObserver((entries, observer) => {\n      if (!entries[0].isIntersecting) return\n\n      setCount(value => value + 1)\n      observer.unobserve(entries[0].target)\n    })\n\n    if (\n      NUMBER_OF_ITEMS_PER_PAGE * count >= postListByCategory.length ||\n      containerRef.current === null ||\n      containerRef.current.children.length === 0 ||\n      observer.current === null\n    )\n      return\n\n    observer.current.observe(\n      containerRef.current.children[containerRef.current.children.length - 1],\n    )\n  }, [count, selectedCategory])\n\n  return {\n    containerRef,\n    postList: postListByCategory.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE),\n  }\n}\n\nexport default useInfiniteScroll\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport PostItem from './PostItem'\nimport { PostListItemType } from 'types/PostItem.types'\nimport useInfiniteScroll, {\n  useInfiniteScrollType,\n} from '../../hooks/useInfiniteScroll'\n\n/** Dummy Data\nconst POST_ITEM_DATA = {\n  title: 'Android에서 MVVM 패턴이 중요한 이유',\n  date: '2023.03.24.',\n  categories: ['Android', 'MVVM'],\n  summary: '수많은 아키텍처 패턴 중 그대 단 하나',\n  thumbnail:\n    'https://github.com/Dcom-KHU/dcom-tech-interview/raw/master/Frontend/Android/images/mvvm-design-pattern-04.png',\n  link: 'https://github.com/Dcom-KHU/dcom-tech-interview/blob/master/Frontend/Android/mvvm-design-pattern.md',\n}\n */\n\ntype PostListProps = {\n  selectedCategory: string\n  posts: PostListItemType[]\n}\n\nconst PostListWrapper = styled.div`\n  display: grid;\n  background-color: rgba(250, 249, 246, 1);\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-gap: 30px 20px;\n  width: 100%;\n  margin: 0 auto;\n  padding: 20px 10vw 5vw;\n\n  @media (max-width: 1200px) {\n    grid-template-columns: 1fr 1fr;\n  }\n\n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n    padding: 50px 30px;\n  }\n`\n\nconst PostList: FunctionComponent<PostListProps> = function ({\n  selectedCategory,\n  posts,\n}) {\n  const { containerRef, postList }: useInfiniteScrollType = useInfiniteScroll(\n    selectedCategory,\n    posts,\n  )\n\n  return (\n    <PostListWrapper ref={containerRef}>\n      {postList.map(\n        ({\n          node: {\n            id,\n            fields: { slug },\n            frontmatter,\n          },\n        }: PostListItemType) => (\n          <PostItem {...frontmatter} link={slug} key={id} />\n        ),\n      )}\n    </PostListWrapper>\n  )\n}\n\nexport default PostList\n","import React, { FunctionComponent, useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\nimport { PostListItemType } from 'types/PostItem.types'\nimport queryString, { ParsedQuery } from 'query-string'\nimport Introduction from '../components/main/Introduction'\nimport CategoryList, { CategoryListProps } from 'components/main/CategoryList'\nimport PostList from 'components/main/PostList'\nimport Template from 'components/common/Template'\n\n/** Dummy Data\nconst CATEGORY_LIST = {\n  All: 5,\n  Android: 3,\n  Kotlin: 2,\n}\n*/\n\ntype IndexPageProps = {\n  location: {\n    search: string\n  }\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n        description: string\n        siteUrl: string\n      }\n    }\n    allMarkdownRemark: {\n      edges: PostListItemType[]\n    }\n    file: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData\n      }\n      publicURL: string\n    }\n  }\n}\n\nconst IndexPage: FunctionComponent<IndexPageProps> = function ({\n  location: { search },\n  data: {\n    site: {\n      siteMetadata: { title, description, siteUrl },\n    },\n    allMarkdownRemark: { edges },\n    file: {\n      childImageSharp: { gatsbyImageData },\n      publicURL,\n    },\n  },\n}) {\n  const parsed: ParsedQuery<string> = queryString.parse(search)\n  const selectedCategory: string =\n    typeof parsed.category !== 'string' || !parsed.category\n      ? 'All'\n      : parsed.category\n\n  const categoryList = useMemo(\n    () =>\n      edges.reduce(\n        (\n          list: CategoryListProps['categoryList'],\n          {\n            node: {\n              frontmatter: { categories },\n            },\n          }: PostListItemType,\n        ) => {\n          categories.forEach(category => {\n            if (list[category] === undefined) list[category] = 1\n            else list[category]++\n          })\n\n          list['All']++\n\n          return list\n        },\n        { All: 0 },\n      ),\n    [],\n  )\n\n  return (\n    <Template\n      title={title}\n      description={description}\n      url={siteUrl}\n      image={publicURL}\n      headerTitle=\"&nbsp;Soople.dev\"\n    >\n      <Introduction profileImage={gatsbyImageData} />\n      <CategoryList\n        selectedCategory={selectedCategory}\n        categoryList={categoryList}\n      />\n      <PostList selectedCategory={selectedCategory} posts={edges} />\n    </Template>\n  )\n}\n\nexport default IndexPage\n\nexport const getPostList = graphql`\n  query getPostList {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 768, height: 400)\n              }\n            }\n          }\n        }\n      }\n    }\n    file(name: { eq: \"avatar\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 120, height: 120)\n      }\n      publicURL\n    }\n  }\n`\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\n\ntype ProfileImageProps = {\n  profileImage: IGatsbyImageData\n}\n\n/** Dummy Data Link\nconst PROFILE_IMAGE_LINK =\n  'https://avatars.githubusercontent.com/u/86971052?s=400&u=71459e5c8a82fa3440c7c7f4d254d58afc204959&v=4'\n*/\n\nconst ProfileImageWrapper = styled(GatsbyImage)`\n  width: 14vh;\n  height: 14vh;\n  margin-bottom: 30px;\n  //border-radius: 80%;\n\n  @media (max-width: 1200px) {\n    width: 12vw;\n    height: 12vw;\n  }\n\n  @media (max-width: 768px) {\n    width: 30vw;\n    height: 30vw;\n\n    margin-top: 1vh;\n  }\n`\n\nconst ProfileImage: FunctionComponent<ProfileImageProps> = function ({\n  profileImage,\n}) {\n  return <ProfileImageWrapper image={profileImage} alt=\"Profile Image\" />\n}\n\nexport default ProfileImage\n","const token = '%[a-f0-9]{2}';\nconst singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');\nconst multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn [decodeURIComponent(components.join(''))];\n\t} catch {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tconst left = components.slice(0, split);\n\tconst right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch {\n\t\tlet tokens = input.match(singleMatcher) || [];\n\n\t\tfor (let i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher) || [];\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tconst replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD',\n\t};\n\n\tlet match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch {\n\t\t\tconst result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tconst entries = Object.keys(replaceMap);\n\n\tfor (const key of entries) {\n\t\t// Replace all decoded components\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nexport default function decodeUriComponent(encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n}\n","export default function splitOnFirst(string, separator) {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (string === '' || separator === '') {\n\t\treturn [];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n}\n","export function includeKeys(object, predicate) {\n\tconst result = {};\n\n\tif (Array.isArray(predicate)) {\n\t\tfor (const key of predicate) {\n\t\t\tconst descriptor = Object.getOwnPropertyDescriptor(object, key);\n\t\t\tif (descriptor?.enumerable) {\n\t\t\t\tObject.defineProperty(result, key, descriptor);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// `Reflect.ownKeys()` is required to retrieve symbol properties\n\t\tfor (const key of Reflect.ownKeys(object)) {\n\t\t\tconst descriptor = Object.getOwnPropertyDescriptor(object, key);\n\t\t\tif (descriptor.enumerable) {\n\t\t\t\tconst value = object[key];\n\t\t\t\tif (predicate(key, value, object)) {\n\t\t\t\t\tObject.defineProperty(result, key, descriptor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport function excludeKeys(object, predicate) {\n\tif (Array.isArray(predicate)) {\n\t\tconst set = new Set(predicate);\n\t\treturn includeKeys(object, key => !set.has(key));\n\t}\n\n\treturn includeKeys(object, (key, value, object) => !predicate(key, value, object));\n}\n","import decodeComponent from 'decode-uri-component';\nimport splitOnFirst from 'split-on-first';\nimport {includeKeys} from 'filter-obj';\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\n// eslint-disable-next-line unicorn/prefer-code-point\nconst strictUriEncode = string => encodeURIComponent(string).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result, [encode(key, options), '[', index, ']'].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\t[encode(key, options), '[]'].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[]=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'colon-list-separator': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\t[encode(key, options), ':list='].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), ':list=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\tcase 'bracket-separator': {\n\t\t\tconst keyValueSep = options.arrayFormat === 'bracket-separator'\n\t\t\t\t? '[]='\n\t\t\t\t: '=';\n\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Translate null to an empty string so that it doesn't serialize as 'null'\n\t\t\t\tvalue = value === null ? '' : value;\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), keyValueSep, encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\tencode(key, options),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], value];\n\t\t\t};\n\t\t}\n\n\t\tcase 'colon-list-separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(:list)$/.exec(key);\n\t\t\t\tkey = key.replace(/:list$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], value];\n\t\t\t};\n\t\t}\n\n\t\tcase 'comma':\n\t\tcase 'separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : (value === null ? value : decode(value, options));\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket-separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = /(\\[])$/.test(key);\n\t\t\t\tkey = key.replace(/\\[]$/, '');\n\n\t\t\t\tif (!isArray) {\n\t\t\t\t\taccumulator[key] = value ? decode(value, options) : value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst arrayValue = value === null\n\t\t\t\t\t? []\n\t\t\t\t\t: value.split(options.arrayFormatSeparator).map(item => decode(item, options));\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = arrayValue;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], ...arrayValue];\n\t\t\t};\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...[accumulator[key]].flat(), value];\n\t\t\t};\n\t\t}\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nexport function extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nexport function parse(query, options) {\n\toptions = {\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false,\n\t\t...options,\n\t};\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst returnValue = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn returnValue;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn returnValue;\n\t}\n\n\tfor (const parameter of query.split('&')) {\n\t\tif (parameter === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst parameter_ = options.decode ? parameter.replace(/\\+/g, ' ') : parameter;\n\n\t\tlet [key, value] = splitOnFirst(parameter_, '=');\n\n\t\tif (key === undefined) {\n\t\t\tkey = parameter_;\n\t\t}\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : (['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options));\n\t\tformatter(decode(key, options), value, returnValue);\n\t}\n\n\tfor (const [key, value] of Object.entries(returnValue)) {\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const [key2, value2] of Object.entries(value)) {\n\t\t\t\tvalue[key2] = parseValue(value2, options);\n\t\t\t}\n\t\t} else {\n\t\t\treturnValue[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn returnValue;\n\t}\n\n\t// TODO: Remove the use of `reduce`.\n\t// eslint-disable-next-line unicorn/no-array-reduce\n\treturn (options.sort === true ? Object.keys(returnValue).sort() : Object.keys(returnValue).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = returnValue[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexport function stringify(object, options) {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = {encode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',', ...options};\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key]))\n\t\t|| (options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const [key, value] of Object.entries(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = value;\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n\t\t\t\treturn encode(key, options) + '[]';\n\t\t\t}\n\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n}\n\nexport function parseUrl(url, options) {\n\toptions = {\n\t\tdecode: true,\n\t\t...options,\n\t};\n\n\tlet [url_, hash] = splitOnFirst(url, '#');\n\n\tif (url_ === undefined) {\n\t\turl_ = url;\n\t}\n\n\treturn {\n\t\turl: url_?.split('?')?.[0] ?? '',\n\t\tquery: parse(extract(url), options),\n\t\t...(options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}),\n\t};\n}\n\nexport function stringifyUrl(object, options) {\n\toptions = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\t[encodeFragmentIdentifier]: true,\n\t\t...options,\n\t};\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = extract(object.url);\n\n\tconst query = {\n\t\t...parse(queryFromUrl, {sort: false}),\n\t\t...object.query,\n\t};\n\n\tlet queryString = stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(object.url);\n\tif (object.fragmentIdentifier) {\n\t\tconst urlObjectForFragmentEncode = new URL(url);\n\t\turlObjectForFragmentEncode.hash = object.fragmentIdentifier;\n\t\thash = options[encodeFragmentIdentifier] ? urlObjectForFragmentEncode.hash : `#${object.fragmentIdentifier}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n}\n\nexport function pick(input, filter, options) {\n\toptions = {\n\t\tparseFragmentIdentifier: true,\n\t\t[encodeFragmentIdentifier]: false,\n\t\t...options,\n\t};\n\n\tconst {url, query, fragmentIdentifier} = parseUrl(input, options);\n\n\treturn stringifyUrl({\n\t\turl,\n\t\tquery: includeKeys(query, filter),\n\t\tfragmentIdentifier,\n\t}, options);\n}\n\nexport function exclude(input, filter, options) {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn pick(input, exclusionFilter, options);\n}\n","import * as queryString from './base.js';\n\nexport default queryString;\n"],"names":["Background","GradientAnimation","PhoneShapedAnimation","keyframes","Wrapper","ContentCard","CardHeader","MainTitle","ContentSection","TypeWriterSection","SubTitle","MetaInfo","AuthorSection","TagSection","skillColors","TagItem","_ref","colorIndex","length","skills","skillLinks","profileImage","___EmotionJSX","TypeWriter","options","loop","onInit","typewriter","pauseFor","typeString","deleteAll","start","ProfileImage","map","skill","index","key","href","CategoryListOutsideWrapper","CategoryListInsideWrapper","WrapperTitle","tagColors","CategoryItem","_styled","active","props","Link","_ref2","children","toString","_ref3","_ref4","selectedCategory","categoryList","Object","entries","_ref6","name","count","to","PostItemWrapper","PostHeader","Title","PostItemContent","Summary","AuthorDate","Date","Category","categoryColors","ThumbnailImage","GatsbyImage","title","date","categories","summary","thumbnail","childImageSharp","gatsbyImageData","link","category","image","alt","posts","containerRef","useRef","observer","setCount","useState","postListByCategory","useMemo","filter","node","frontmatter","includes","useEffect","current","IntersectionObserver","isIntersecting","value","unobserve","target","observe","postList","slice","PostListWrapper","useInfiniteScroll","ref","id","fields","slug","PostItem","location","search","data","site","siteMetadata","description","siteUrl","allMarkdownRemark","edges","file","publicURL","parsed","queryString","parse","reduce","list","forEach","undefined","All","Template","url","headerTitle","Introduction","CategoryList","PostList","ProfileImageWrapper","token","singleMatcher","RegExp","multiMatcher","decodeComponents","components","split","decodeURIComponent","join","left","right","Array","prototype","concat","call","decode","input","tokens","match","i","decodeUriComponent","encodedURI","TypeError","replaceMap","exec","result","keys","replace","customDecodeURIComponent","splitOnFirst","string","separator","separatorIndex","indexOf","includeKeys","object","predicate","isArray","descriptor","getOwnPropertyDescriptor","enumerable","defineProperty","Reflect","ownKeys","isNullOrUndefined","strictUriEncode","encodeURIComponent","x","charCodeAt","toUpperCase","encodeFragmentIdentifier","Symbol","validateArrayFormatSeparator","encode","strict","keysSorter","sort","a","b","Number","removeHash","hashStart","parseValue","parseNumbers","isNaN","trim","parseBooleans","toLowerCase","extract","queryStart","query","arrayFormat","arrayFormatSeparator","formatter","accumulator","isEncodedArray","newValue","item","test","arrayValue","flat","parserForArrayFormat","returnValue","create","parameter","parameter_","key2","value2","Boolean","stringify","shouldFilter","skipNull","skipEmptyString","keyValueSep","encoderForArrayFormat","objectCopy","parseUrl","url_","hash","parseFragmentIdentifier","fragmentIdentifier","stringifyUrl","getHash","urlObjectForFragmentEncode","URL","pick","exclude"],"sourceRoot":""}